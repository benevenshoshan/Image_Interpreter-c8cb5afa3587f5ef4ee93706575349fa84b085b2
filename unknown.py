#! /usr/bin/env python
#
# GUI module generated by PAGE version 4.9
# In conjunction with Tcl version 8.6
#    Mar 12, 2018 09:44:16 PM
import cv2
from main import predict
try:
    from Tkinter import *
except ImportError:
    from tkinter import *

try:
    import ttk
    py3 = 0
except ImportError:
    import tkinter.ttk as ttk
    py3 = 1

import unknown_support
from keras.models import load_model


def vp_start_gui():
    '''Starting point when module is the main routine.'''
    global val, w, root
    root = Tk()
    unknown_support.set_Tk_var()
    top = Fast_Cart (root)
    unknown_support.init(root, top)
    root.mainloop()

w = None
def create_Fast_Cart(root, *args, **kwargs):
    '''Starting point when module is imported by another program.'''
    global w, w_win, rt
    rt = root
    w = Toplevel (root)
    unknown_support.set_Tk_var()
    top = Fast_Cart (w)
    unknown_support.init(w, top, *args, **kwargs)
    return (w, top)

def destroy_Fast_Cart():
    global w
    w.destroy()
    w = None

class Fast_Cart:
    def __init__(self, top=None):
        '''This class configures and populates the toplevel window.
           top is the toplevel containing window.'''
        _bgcolor = '#d9d9d9'  # X11 color: 'gray85'
        _fgcolor = '#000000'  # X11 color: 'black'
        _compcolor = '#d9d9d9' # X11 color: 'gray85'
        _ana1color = '#d9d9d9' # X11 color: 'gray85' 
        _ana2color = '#d9d9d9' # X11 color: 'gray85' 
        self.style = ttk.Style()
        if sys.platform == "win32":
            self.style.theme_use('winnative')
        self.style.configure('.',background=_bgcolor)
        self.style.configure('.',foreground=_fgcolor)
        self.style.configure('.',font="TkDefaultFont")
        self.style.map('.',background=
            [('selected', _compcolor), ('active',_ana2color)])


        #Scanning variables
        self.total_price=0
        self.num_of_scans=0
        self.last_prediction=''

        #models
        self.model_dict={'Banana_Lemon': load_model('Banana_Lemon.h5'), 'Banana_Cucumber': load_model('Banana_Cucumber.h5'),
                         'Cucumber_Lemon': load_model('Cucumber_Lemon.h5')}


        top.geometry("1024x768+495+126")
        top.title("Fast Cart")
        top.configure(background="#d9d9d9")

        self.menubar = Menu(top,font="TkMenuFont",bg=_bgcolor,fg=_fgcolor)
        top.configure(menu = self.menubar)

        self.TButton1 = ttk.Button(top)
        self.TButton1.place(relx=0.41, rely=0.9, height=45, width=156)
        self.TButton1.configure(takefocus="")
        self.TButton1.configure(text='''Scan an Item''')
        self.TButton1.configure(width=156)
        self.TButton1.configure(command=lambda: unknown_support.scan_button(num_of_scans=self.num_of_scans))

        self.TButton2 = ttk.Button(top)
        self.TButton2.place(relx=0.89, rely=0.94, height=35, width=86)
        self.TButton2.configure(takefocus="")
        self.TButton2.configure(text='''Checkout''')
        self.TButton2.configure(width=86)

        self.Scrolledlistbox1 = ScrolledListBox(top)
        self.Scrolledlistbox1.place(relx=0.06, rely=0.1, relheight=0.67
                , relwidth=0.44)
        self.Scrolledlistbox1.configure(background="white")
        self.Scrolledlistbox1.configure(disabledforeground="#a3a3a3")
        self.Scrolledlistbox1.configure(font="TkFixedFont")
        self.Scrolledlistbox1.configure(foreground="black")
        self.Scrolledlistbox1.configure(highlightbackground="#d9d9d9")
        self.Scrolledlistbox1.configure(highlightcolor="#d9d9d9")
        self.Scrolledlistbox1.configure(selectbackground="#c4c4c4")
        self.Scrolledlistbox1.configure(selectforeground="black")
        self.Scrolledlistbox1.configure(width=10)

        self.Message1 = Message(top)
        self.Message1.place(relx=0.9, rely=0.89, relheight=0.04, relwidth=0.08)
        self.Message1.configure(background="#d9d9d9")
        self.Message1.configure(foreground="#000000")
        self.Message1.configure(highlightbackground="#d9d9d9")
        self.Message1.configure(highlightcolor="black")
        self.Message1.configure(text='Total: 0')
        self.Message1.configure(width=80)

        self.TEntry1 = ttk.Entry(top)
        self.TEntry1.place(relx=0.73, rely=0.44, relheight=0.03, relwidth=0.12)
        self.TEntry1.configure(takefocus="")
        self.TEntry1.configure(cursor="ibeam")

        self.QuanButton = ttk.Button(top)
        self.QuanButton.place(relx=0.73, rely=0.48, height=25, width=126)
        self.QuanButton.configure(command=lambda: unknown_support.QuanButton(num_of_scans=self.num_of_scans, total_price=self.total_price))
        self.QuanButton.configure(takefocus="")
        self.QuanButton.configure(text='''Upadte Quantity''')
        self.QuanButton.configure(width=126)


# The following code is added to facilitate the Scrolled widgets you specified.
class AutoScroll(object):
    '''Configure the scrollbars for a widget.'''

    def __init__(self, master):
        #  Rozen. Added the try-except clauses so that this class
        #  could be used for scrolled entry widget for which vertical
        #  scrolling is not supported. 5/7/14.
        try:
            vsb = ttk.Scrollbar(master, orient='vertical', command=self.yview)
        except:
            pass
        hsb = ttk.Scrollbar(master, orient='horizontal', command=self.xview)

        #self.configure(yscrollcommand=_autoscroll(vsb),
        #    xscrollcommand=_autoscroll(hsb))
        try:
            self.configure(yscrollcommand=self._autoscroll(vsb))
        except:
            pass
        self.configure(xscrollcommand=self._autoscroll(hsb))

        self.grid(column=0, row=0, sticky='nsew')
        try:
            vsb.grid(column=1, row=0, sticky='ns')
        except:
            pass
        hsb.grid(column=0, row=1, sticky='ew')

        master.grid_columnconfigure(0, weight=1)
        master.grid_rowconfigure(0, weight=1)

        # Copy geometry methods of master  (taken from ScrolledText.py)
        if py3:
            methods = Pack.__dict__.keys() | Grid.__dict__.keys() \
                  | Place.__dict__.keys()
        else:
            methods = Pack.__dict__.keys() + Grid.__dict__.keys() \
                  + Place.__dict__.keys()

        for meth in methods:
            if meth[0] != '_' and meth not in ('config', 'configure'):
                setattr(self, meth, getattr(master, meth))

    @staticmethod
    def _autoscroll(sbar):
        '''Hide and show scrollbar as needed.'''
        def wrapped(first, last):
            first, last = float(first), float(last)
            if first <= 0 and last >= 1:
                sbar.grid_remove()
            else:
                sbar.grid()
            sbar.set(first, last)
        return wrapped

    def __str__(self):
        return str(self.master)

def _create_container(func):
    '''Creates a ttk Frame with a given master, and use this new frame to
    place the scrollbars and the widget.'''
    def wrapped(cls, master, **kw):
        container = ttk.Frame(master)
        return func(cls, container, **kw)
    return wrapped

class ScrolledListBox(AutoScroll, Listbox):
    '''A standard Tkinter Text widget with scrollbars that will
    automatically show/hide as needed.'''
    @_create_container
    def __init__(self, master, **kw):
        Listbox.__init__(self, master, **kw)
        AutoScroll.__init__(self, master)


if __name__ == '__main__':
    vp_start_gui()





